#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D diff_texture;
uniform sampler2D ref_texture;

struct Light {
  vec3 position;
  vec3 direction;
  float cutoff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  
  float constant;
  float linear;
  float quadratic;
};

uniform Light light;  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  
  // ambient
  vec3 ambient = light.ambient * vec3(texture(diff_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 fragToLight = light.position - aPos;
  vec3 lightDir;
  
  lightDir = normalize(fragToLight);
  float diff = max(dot(norm, lightDir), 0.0);
  
  vec3 diffuse = light.diffuse * diff * vec3(texture(diff_texture, aTexCoord)); 
  
  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(ref_texture, aTexCoord));
  
  //Light attenuation
    
  //If directional, do nothing
  //Directional light
  float attenuation = 1.0;
  
  //All other lights with intensity falloff
  if(light.position.x < 10000) {
    float dist = length(fragToLight);
    attenuation = 1.0 / (light.constant + (light.linear*dist) + (light.quadratic*dist * dist));
  }
  
  //DEBUGING SPOTLIGHT
  //attenuation = 1.0;
  
  //If spotlight
  //Spotlight filters again to either reduce to 0 or reduce intensity for soft edges
  if(light.cutoff > 0) {
    //Do spotlight calcs
    float theta = dot(lightDir, normalize(-light.direction));
    
    if(theta > light.cutoff)
    {
    	//inside spotlight
    	//ambient *= 0;	Ambient not attenuated
    	diffuse *= attenuation;
        specular *= attenuation;
        
        vec3 result = ambient + diffuse + specular;
       	fragColor = vec4(result, 1.0);
    } else {
    	fragColor = vec4(light.ambient * texture(diff_texture, aTexCoord).rgb, 1.0);
    }
  }
  
  //Else If pointlight
  //ambient *= attenuation;
  //diffuse *= attenuation;
  //specular *= attenuation;

  //vec3 result = ambient + diffuse + specular;
  //fragColor = vec4(result, 1.0);
}
